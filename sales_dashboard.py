# -*- coding: utf-8 -*-
"""sales_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14AsWfdjuaRXLhLF1il0pVzf84OEPD8wa
"""


# sales_dashboard.py

import streamlit as st
import pandas as pd
import plotly.express as px

# Set page config
st.set_page_config(page_title="Sales Dashboard", layout="wide")
st.title("📊 Sales Dashboard - Sample Sales Data")

# Upload CSV
uploaded_file = st.file_uploader("Upload your 'sales_data_sample.csv' file", type=["csv"])
if uploaded_file:
    # Read the CSV with correct encoding
    df = pd.read_csv(uploaded_file, encoding='latin1', parse_dates=['ORDERDATE'])

    # Sidebar filters
    st.sidebar.header("🧰 Filter Data")

    region = st.sidebar.multiselect(
        "Select Territory", 
        options=df['TERRITORY'].dropna().unique(), 
        default=df['TERRITORY'].dropna().unique()
    )

    product = st.sidebar.multiselect(
        "Select Product Line", 
        options=df['PRODUCTLINE'].unique(), 
        default=df['PRODUCTLINE'].unique()
    )

    date_range = st.sidebar.date_input(
        "Select Date Range", 
        [df['ORDERDATE'].min(), df['ORDERDATE'].max()]
    )

    # Filtered data
    filtered_df = df[
        (df['TERRITORY'].isin(region)) &
        (df['PRODUCTLINE'].isin(product)) &
        (df['ORDERDATE'] >= pd.to_datetime(date_range[0])) &
        (df['ORDERDATE'] <= pd.to_datetime(date_range[1]))
    ]

    # Key Metrics
    st.subheader("📈 Key Metrics")
    total_sales = filtered_df['SALES'].sum()
    total_units = filtered_df['QUANTITYORDERED'].sum()
    avg_unit_cost = filtered_df['PRICEEACH'].mean()

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Sales ($)", f"{total_sales:,.2f}")
    col2.metric("Total Units Sold", f"{total_units:,}")
    col3.metric("Avg. Unit Cost ($)", f"{avg_unit_cost:,.2f}")

    # Sales by Product Line
    st.subheader("🔍 Sales by Product Line")
    product_sales = (
        filtered_df.groupby("PRODUCTLINE")["SALES"]
        .sum().reset_index()
        .sort_values(by="SALES", ascending=False)
    )
    fig1 = px.bar(product_sales, x="PRODUCTLINE", y="SALES", color="PRODUCTLINE", text_auto=".2s")
    fig1.update_layout(yaxis_tickprefix="$")
    st.plotly_chart(fig1, use_container_width=True)

    # Sales Over Time
    st.subheader("📅 Sales Over Time")
    time_series = (
        filtered_df.groupby("ORDERDATE")["SALES"]
        .sum().reset_index()
        .sort_values("ORDERDATE")
    )
    fig2 = px.line(time_series, x="ORDERDATE", y="SALES", markers=True)
    fig2.update_layout(yaxis_tickprefix="$")
    st.plotly_chart(fig2, use_container_width=True)

    # Top 5 Regions by Sales
    st.subheader("🌍 Top 5 Performing Regions")
    top_regions = (
        filtered_df.groupby("TERRITORY")["SALES"]
        .sum().sort_values(ascending=False)
        .head(5).reset_index()
    )
    fig3 = px.bar(top_regions, x="TERRITORY", y="SALES", color="TERRITORY", text_auto=".2s")
    fig3.update_layout(yaxis_tickprefix="$")
    st.plotly_chart(fig3, use_container_width=True)

else:
    st.info("👆 Please upload the 'sales_data_sample.csv' file to begin.")

